import asyncio
import datetime
import os
import requests
import json

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
import gspread
from openpyxl import Workbook, load_workbook

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = os.getenv("BOT_TOKEN")
HR_TELEGRAM_ID = int(os.getenv("HR_TELEGRAM_ID"))
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
SHEET_NAME = os.getenv("SHEET_NAME", "–õ–∏—Å—Ç1")
DRIVE_FOLDER_ID = os.getenv("DRIVE_FOLDER_ID")

CREDENTIALS_FILE = "service_account.json"
with open(CREDENTIALS_FILE, "w") as f:
    f.write(os.getenv("GOOGLE_CREDENTIALS_JSON"))

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

class Form(StatesGroup):
    fio = State()
    positions = State()
    resume = State()
    contacts = State()
    consent = State()
    post_consent = State()

def yes_no_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]
    ])

def consent_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ")],
        [KeyboardButton(text="–£–¥–∞–ª–∏—Ç–µ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ")]
    ])

def authorize_google():
    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]
    creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=scopes)
    client = gspread.authorize(creds)
    drive_service = build('drive', 'v3', credentials=creds)
    return drive_service, client

def upload_resume_to_drive(drive_service, file_id, fio):
    bot_file = asyncio.run(bot.get_file(file_id))
    file_url = f"https://api.telegram.org/file/bot{API_TOKEN}/{bot_file.file_path}"
    ext = os.path.splitext(bot_file.file_path)[1] or ".pdf"
    safe_filename = f"{fio}{ext}"
    local_path = safe_filename

    response = requests.get(file_url)
    with open(local_path, "wb") as f:
        f.write(response.content)

    file_metadata = {
        'name': safe_filename,
        'parents': [DRIVE_FOLDER_ID]
    }
    media = MediaFileUpload(local_path, resumable=True)
    uploaded_file = drive_service.files().create(
        body=file_metadata,
        media_body=media,
        fields='id'
    ).execute()

    os.remove(local_path)

    return f"https://drive.google.com/file/d/{uploaded_file['id']}/view?usp=sharing"

def write_to_google_sheets(fio, positions, contacts, resume_link, timestamp):
    drive_service, client = authorize_google()
    sheet = client.open_by_key(GOOGLE_SHEET_ID).worksheet(SHEET_NAME)
    sheet.append_row([timestamp, fio, positions, contacts, resume_link])
    print("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ Google –¢–∞–±–ª–∏—Ü—É")

def write_to_excel(fio, positions, contacts, resume_link, timestamp):
    filename = "log.xlsx"
    if not os.path.exists(filename):
        wb = Workbook()
        ws = wb.active
        ws.append(["–í—Ä–µ–º—è", "–§–ò–û", "–î–æ–ª–∂–Ω–æ—Å—Ç–∏", "–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–†–µ–∑—é–º–µ (—Å—Å—ã–ª–∫–∞)"])
        wb.save(filename)
    wb = load_workbook(filename)
    ws = wb.active
    ws.append([timestamp, fio, positions, contacts, resume_link])
    wb.save(filename)

@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.set_state(Form.fio)
    await message.answer(
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
        "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è üì• —Å–±–æ—Ä–∞ —Ä–µ–∑–µ—Ä–≤–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–ø–∞–Ω–∏—é ¬´–í—Å–µ –ü–æ—Ä–æ–≥–∏¬ª.\n\n"
        "ü§ñ –Ø –Ω–µ —É–º–µ—é –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥, –ø–æ—ç—Ç–æ–º—É, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Å–º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n"
        "–ù–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–≥—É –í–∞—à–µ–π –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä–µ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å—Å—è –≤ –ø–æ—Ç–æ–∫–µ –¥—Ä—É–≥–∏—Ö —Ä–µ–∑—é–º–µ.\n\n"
        "üìù –î–ª—è —ç—Ç–æ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –§–ò–û:"
    )

@dp.message(Form.fio)
async def handle_fio(message: Message, state: FSMContext):
    await state.update_data(fio=message.text)
    await state.set_state(Form.positions)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")

@dp.message(Form.positions)
async def handle_positions(message: Message, state: FSMContext):
    await state.update_data(positions=message.text)
    await state.set_state(Form.resume)
    await message.answer("–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª —Å —Ä–µ–∑—é–º–µ? –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")

@dp.message(Form.resume, F.document)
async def handle_resume_file(message: Message, state: FSMContext):
    await state.update_data(resume=message.document.file_id)
    await state.set_state(Form.contacts)
    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–≤—è–∑–∏ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ ‚Äî —Ç–µ–ª–µ—Ñ–æ–Ω —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º WhatsApp):")

@dp.message(Form.resume)
async def skip_resume(message: Message, state: FSMContext):
    await state.update_data(resume=None)
    await state.set_state(Form.contacts)
    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–≤—è–∑–∏ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ ‚Äî —Ç–µ–ª–µ—Ñ–æ–Ω —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º WhatsApp):")

@dp.message(Form.contacts)
async def handle_contacts(message: Message, state: FSMContext):
    await state.update_data(contacts=message.text)
    await state.set_state(Form.consent)
    await message.answer("–í—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?", reply_markup=yes_no_keyboard())

@dp.message(Form.consent, F.text.lower() == "–¥–∞")
async def handle_consent_yes(message: Message, state: FSMContext):
    await finalize(message, state)

@dp.message(Form.consent, F.text.lower() == "–Ω–µ—Ç")
async def handle_consent_no(message: Message, state: FSMContext):
    await state.set_state(Form.post_consent)
    await message.answer(
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –∑–∞–∫–æ–Ω—É –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –í–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.",
        reply_markup=consent_keyboard()
    )

@dp.message(Form.post_consent, F.text.lower() == "–¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ")
async def handle_post_consent_yes(message: Message, state: FSMContext):
    await finalize(message, state)

@dp.message(Form.post_consent, F.text.lower() == "—É–¥–∞–ª–∏—Ç–µ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ")
async def handle_post_consent_delete(message: Message, state: FSMContext):
    await message.answer(
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É, –µ—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ. "
        "–ú—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ –í–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∏ –Ω–∞–¥–µ–µ–º—Å—è –ø–æ—Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å –≤ –±—É–¥—É—â–µ–º!",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()

async def finalize(message: Message, state: FSMContext):
    data = await state.get_data()
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    resume_link = "–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
    if data.get("resume"):
        try:
            drive_service, _ = authorize_google()
            resume_link = upload_resume_to_drive(drive_service, data["resume"], data["fio"])
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ Google –î–∏—Å–∫:", e)

    summary = (
        f"üì• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è</b>\n\n"
        f"üë§ <b>–§–ò–û:</b> {data.get('fio')}\n"
        f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç–∏:</b> {data.get('positions')}\n"
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {data.get('contacts')}\n"
        f"üìé <b>–†–µ–∑—é–º–µ:</b> {resume_link}\n"
        f"üïí <b>–í—Ä–µ–º—è:</b> {now}\n"
        f"‚úÖ <b>–°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ</b>"
    )

    try:
        write_to_excel(data["fio"], data["positions"], data["contacts"], resume_link, now)
        write_to_google_sheets(data["fio"], data["positions"], data["contacts"], resume_link, now)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—ã:", e)

    try:
        await bot.send_message(chat_id=HR_TELEGRAM_ID, text=summary)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è HR:", e)

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤. –ú—ã —Å–≤—è–∂–µ–º—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è –¥–ª—è –í–∞—Å –≤–∞–∫–∞–Ω—Å–∏—è.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
